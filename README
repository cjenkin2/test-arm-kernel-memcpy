Instructions:

1. Edit Makefile and define ARMV4, ARMV5, ARMV6 or ARMV7 depending on your
   platform. Cortex is ARMV7. ARMV4 and ARMV5 have not been tested. Note:
   since the optimized memcpy, copy_from_user and copy_to_user make
   unconditional use of the PLD instruction, these won't work on ARMV4.

2. Optionally enable Thumb2 mode compilation by uncommenting the two lines
   defining THUMB2_CFLAGS. Only supported on ARMV7.

3. Optionally change PREFETCH_DISTANCE from the default value of 3 to 2.

4. Optionally enable NEON optimizations by uncommenting the line defining
   NEON_CFLAGS. Only supported on devices with NEON.

5. Run make.

Run ./bench.script to run a set of benchmarks covering various optimized
memory functions and compare them with libc and the original kernel
implementation.

Issues:

The Cortex A9 core is handled as having L1_CACHE_BYTES of 64
(L1_CACHE_SHIFT of 6 in kernel terms), but this may be inaccurate,
impacting performance. It should probably be 32 which suggests that the
kernel having L1_CACHE_SHIFT of 6 (L1_CACHE_BYTES of 32) for Cortex A9
might be a mismatch.

The "benchmark" program can be used to benchmark or validate any of the
included memory functions.

Examples:

Display overview of test numbers, memcpy variants and memset variants:

	./benchmark --list

Test memset performance for test 0 (a mix of power-of-2 sizes):

	./benchmark --memset abc --test 0

Test copy page performance using both regular memcpy and copy_page (old
and optimized implementations):

	./benchmark --memcpy bcfg --test 43

Test memcpy performance for test 2 (unaligned mixed sizes), and do it
quickly (only three repetitions instead of five, and only one second per
test instead of two);

	./benchmark --quick --memcpy abc --test 2

Validate (test for correctness) the optimized memcpy implementation:

	./benchmark --repeat 50 --memcpy c --validate 

Validate (test for correctness) the optimized memset implementation:

	./benchmark --repeat 50 --memset c --validate
